"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsEngine = void 0;
const viewer_settings_1 = require("@shapediver/viewer.settings");
const EventEngine_1 = require("../event-engine/EventEngine");
const Logger_1 = require("../logger/Logger");
const ShapeDiverViewerErrors_1 = require("../logger/ShapeDiverViewerErrors");
class SettingsEngine {
    constructor() {
        // #region Properties (8)
        this._eventEngine = EventEngine_1.EventEngine.instance;
        this._logger = Logger_1.Logger.instance;
        this._settings = (0, viewer_settings_1.DefaultsV3_3)();
        this._settings_version = viewer_settings_1.latestVersion;
        // #endregion Private Methods (1)
    }
    // #endregion Properties (8)
    // #region Public Accessors (10)
    get ar() {
        return this._settings.ar;
    }
    get camera() {
        return this._settings.camera;
    }
    get environment() {
        return this._settings.environment;
    }
    get environmentGeometry() {
        return this._settings.environmentGeometry;
    }
    get general() {
        return this._settings.general;
    }
    get light() {
        return this._settings.light;
    }
    get rendering() {
        return this._settings.rendering;
    }
    get session() {
        return this._settings.session;
    }
    set session(value) {
        this._settings.session = value;
    }
    get settings() {
        return this._settings;
    }
    get settingsJson() {
        return this._settingsJson;
    }
    // #endregion Public Accessors (10)
    // #region Public Methods (4)
    convertToTargetVersion() {
        return (0, viewer_settings_1.convert)(this._settings, this._settings_version);
    }
    flatten() {
        const flattenObject = (ob) => {
            const toReturn = {};
            for (let i in ob) {
                if (!ob.hasOwnProperty(i))
                    continue;
                if ((typeof ob[i]) == 'object') {
                    const flatObject = flattenObject(ob[i]);
                    for (var x in flatObject) {
                        if (!flatObject.hasOwnProperty(x))
                            continue;
                        toReturn[i + '.' + x] = flatObject[x];
                    }
                }
                else {
                    toReturn[i] = ob[i];
                }
            }
            return toReturn;
        };
        return flattenObject(this.settings);
    }
    loadSettings(json) {
        this._settingsJson = json;
        if (JSON.stringify(json) !== JSON.stringify({})) {
            const prevVersions = ['1.0', '2.0', '3.0', '3.1', '3.2'];
            for (let i = 0; i < prevVersions.length; i++) {
                const v = prevVersions[i];
                try {
                    (0, viewer_settings_1.validate)(json, v);
                    this._settings_version = v;
                    this._settings = (0, viewer_settings_1.convert)(json, viewer_settings_1.latestVersion);
                    this.cleanSettings(this._settings);
                    return;
                }
                catch (e) { }
            }
            try {
                (0, viewer_settings_1.validate)(json, viewer_settings_1.latestVersion);
                this._settings_version = viewer_settings_1.latestVersion;
                this._settings = (0, viewer_settings_1.convert)(json, viewer_settings_1.latestVersion);
                this.cleanSettings(this._settings);
                return;
            }
            catch (e) {
                throw new ShapeDiverViewerErrors_1.ShapeDiverViewerSettingsError('SettingsEngine.loadSettings: Settings could not be validated. ' + e.message, e);
            }
        }
        else {
            this._settings_version = viewer_settings_1.latestVersion;
            this._settings = (0, viewer_settings_1.DefaultsV3_3)();
            return;
        }
    }
    reset() {
        this._settings_version = viewer_settings_1.latestVersion;
        this._settings = (0, viewer_settings_1.DefaultsV3_3)();
    }
    // #endregion Public Methods (4)
    // #region Private Methods (1)
    cleanSettings(json) {
        for (let c in json.camera.cameras) {
            const camera = json.camera.cameras[c];
            if (camera.type === 'perspective') {
                const restrictions = camera.controls.restrictions;
                if (restrictions.position.cube.min.x === null)
                    restrictions.position.cube.min.x = -Infinity;
                if (restrictions.position.cube.min.y === null)
                    restrictions.position.cube.min.y = -Infinity;
                if (restrictions.position.cube.min.z === null)
                    restrictions.position.cube.min.z = -Infinity;
                if (restrictions.position.cube.max.x === null)
                    restrictions.position.cube.max.x = Infinity;
                if (restrictions.position.cube.max.y === null)
                    restrictions.position.cube.max.y = Infinity;
                if (restrictions.position.cube.max.z === null)
                    restrictions.position.cube.max.z = Infinity;
                if (restrictions.position.sphere.radius === null)
                    restrictions.position.sphere.radius = Infinity;
                if (restrictions.target.cube.min.x === null)
                    restrictions.target.cube.min.x = -Infinity;
                if (restrictions.target.cube.min.y === null)
                    restrictions.target.cube.min.y = -Infinity;
                if (restrictions.target.cube.min.z === null)
                    restrictions.target.cube.min.z = -Infinity;
                if (restrictions.target.cube.max.x === null)
                    restrictions.target.cube.max.x = Infinity;
                if (restrictions.target.cube.max.y === null)
                    restrictions.target.cube.max.y = Infinity;
                if (restrictions.target.cube.max.z === null)
                    restrictions.target.cube.max.z = Infinity;
                if (restrictions.target.sphere.radius === null)
                    restrictions.target.sphere.radius = Infinity;
                if (restrictions.rotation.minAzimuthAngle === null)
                    restrictions.rotation.minAzimuthAngle = -Infinity;
                if (restrictions.rotation.maxAzimuthAngle === null)
                    restrictions.rotation.maxAzimuthAngle = Infinity;
                if (restrictions.zoom.maxDistance === null)
                    restrictions.zoom.maxDistance = Infinity;
            }
        }
    }
}
exports.SettingsEngine = SettingsEngine;
//# sourceMappingURL=SettingsEngine.js.map