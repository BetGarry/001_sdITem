"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SessionApi_creationControlCenter, _SessionApi_sessionEngine, _SessionApi_logger, _SessionApi_inputValidator, _SessionApi_gltfConverter, _SessionApi_outputs, _SessionApi_parameters, _SessionApi_exports;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionApi = void 0;
const viewer_session_engine_session_engine_1 = require("@shapediver/viewer.session-engine.session-engine");
const viewer_main_creation_control_center_1 = require("@shapediver/viewer.main.creation-control-center");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const OutputApi_1 = require("./OutputApi");
const ExportApi_1 = require("./ExportApi");
const ParameterApi_1 = require("./ParameterApi");
const FileParameterApi_1 = require("./FileParameterApi");
const viewer_data_engine_gltf_converter_1 = require("@shapediver/viewer.data-engine.gltf-converter");
const SessionApiData_1 = require("./data/SessionApiData");
class SessionApi {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor(sessionEngine) {
        // #region Properties (2)
        _SessionApi_creationControlCenter.set(this, viewer_main_creation_control_center_1.CreationControlCenter.instance);
        _SessionApi_sessionEngine.set(this, void 0);
        _SessionApi_logger.set(this, viewer_shared_services_1.Logger.instance);
        _SessionApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);
        _SessionApi_gltfConverter.set(this, viewer_data_engine_gltf_converter_1.GLTFConverter.instance);
        _SessionApi_outputs.set(this, {});
        _SessionApi_parameters.set(this, {});
        _SessionApi_exports.set(this, {});
        __classPrivateFieldSet(this, _SessionApi_sessionEngine, sessionEngine, "f");
        if (!__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").initialized)
            throw new viewer_shared_services_1.ShapeDiverViewerSessionError('Session could not be initialized.');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").updateCallback = (newNode, oldNode) => {
            if (newNode.data.findIndex(d => d instanceof SessionApiData_1.SessionApiData) === -1)
                newNode.addData(new SessionApiData_1.SessionApiData(this));
        };
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").updateCallback(this.node, this.node);
        for (let o in __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").outputs)
            __classPrivateFieldGet(this, _SessionApi_outputs, "f")[o] = new OutputApi_1.OutputApi(__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").outputs[o]);
        for (let e in __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").exports)
            __classPrivateFieldGet(this, _SessionApi_exports, "f")[e] = new ExportApi_1.ExportApi(__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").exports[e]);
        for (let p in __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").parameters) {
            if (__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").parameters[p] instanceof viewer_session_engine_session_engine_1.FileParameter) {
                __classPrivateFieldGet(this, _SessionApi_parameters, "f")[p] = new FileParameterApi_1.FileParameterApi(__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").parameters[p]);
            }
            else {
                __classPrivateFieldGet(this, _SessionApi_parameters, "f")[p] = new ParameterApi_1.ParameterApi(__classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").parameters[p]);
            }
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (26)
    get automaticSceneUpdate() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").automaticSceneUpdate;
    }
    set automaticSceneUpdate(value) {
        const scope = 'automaticSceneUpdate';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'boolean');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").automaticSceneUpdate = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get commitParameters() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").settingsEngine.general.commitParameters;
    }
    set commitParameters(value) {
        const scope = 'commitParameters';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'boolean');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").settingsEngine.general.commitParameters = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get commitSettings() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").settingsEngine.general.commitSettings;
    }
    set commitSettings(value) {
        const scope = 'commitSettings';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'boolean');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").settingsEngine.general.commitSettings = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get customizeOnParameterChange() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").customizeOnParameterChange;
    }
    set customizeOnParameterChange(value) {
        const scope = 'customizeOnParameterChange';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'boolean');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").customizeOnParameterChange = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get excludeViewports() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").excludeViewports;
    }
    set excludeViewports(value) {
        const scope = 'excludeViewports';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'stringArray');
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").excludeViewports = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get exports() {
        return __classPrivateFieldGet(this, _SessionApi_exports, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").id;
    }
    get initialized() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").initialized;
    }
    get jwtToken() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").bearerToken;
    }
    set jwtToken(value) {
        const scope = 'jwtToken';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'string', false);
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").bearerToken = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get modelViewUrl() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").modelViewUrl;
    }
    get node() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").node;
    }
    get outputs() {
        return __classPrivateFieldGet(this, _SessionApi_outputs, "f");
    }
    get parameters() {
        return __classPrivateFieldGet(this, _SessionApi_parameters, "f");
    }
    get updateCallback() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").updateCallback;
    }
    set updateCallback(value) {
        const scope = 'updateCallback';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'function', false);
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").updateCallback = (newNode, oldNode) => {
            if (newNode.data.findIndex(d => d instanceof SessionApiData_1.SessionApiData) === -1)
                newNode.addData(new SessionApiData_1.SessionApiData(this));
            if (value)
                value(newNode, oldNode);
        };
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was updated to ${value}.`);
    }
    get refreshJwtToken() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").refreshBearerToken;
    }
    set refreshJwtToken(value) {
        const scope = 'refreshJwtToken';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, value, 'function', false);
        __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").refreshBearerToken = value;
        __classPrivateFieldGet(this, _SessionApi_logger, "f").debug(`SessionApi.${scope}: ${scope} was set to ${value}`);
    }
    get ticket() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").ticket;
    }
    // #endregion Public Accessors (26)
    // #region Public Methods (21)
    applySettings(response, sections) {
        const scope = 'applySettings';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, response, 'object');
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, sections, 'object', false);
        return __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").applySettings(this.id, response, sections);
    }
    canGoBack() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").canGoBack();
    }
    canGoForward() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").canGoForward();
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").closeSessionEngine(this.id);
        });
    }
    convertToGlTF() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let r in __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").renderingEngines)
                __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").renderingEngines[r].update('SessionApi.convertToGlTF');
            const result = yield __classPrivateFieldGet(this, _SessionApi_gltfConverter, "f").convert(this.node, false);
            return new Blob([result], { type: 'application/octet-stream' });
        });
    }
    customize(force = false) {
        const scope = 'customize';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, force, 'boolean', false);
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").customize(force);
    }
    customizeParallel(parameterValues) {
        const scope = 'customizeParallel';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, parameterValues, 'object');
        for (let p in parameterValues)
            __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, parameterValues[p], 'string');
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").customizeParallel(parameterValues);
    }
    getExportById(id) {
        const scope = 'getExportById';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, id, 'string');
        return __classPrivateFieldGet(this, _SessionApi_exports, "f")[id];
    }
    getExportByName(name) {
        const scope = 'getExportByName';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, name, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_exports, "f")).filter(e => e.name === name);
    }
    getExportByType(type) {
        const scope = 'getExportByType';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, type, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_exports, "f")).filter(e => e.type === type);
    }
    getOutputByFormat(format) {
        const scope = 'getOutputByFormat';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, format, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_outputs, "f")).filter(o => o.format.includes(format));
    }
    getOutputById(id) {
        const scope = 'getOutputById';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, id, 'string');
        return __classPrivateFieldGet(this, _SessionApi_outputs, "f")[id];
    }
    getOutputByName(name) {
        const scope = 'getOutputByName';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, name, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_outputs, "f")).filter(o => o.name === name);
    }
    getParameterById(id) {
        const scope = 'getParameterById';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, id, 'string');
        return __classPrivateFieldGet(this, _SessionApi_parameters, "f")[id];
    }
    getParameterByName(name) {
        const scope = 'getParameterByName';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, name, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_parameters, "f")).filter(p => p.name === name);
    }
    getParameterByType(type) {
        const scope = 'getParameterByType';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, type, 'string');
        return Object.values(__classPrivateFieldGet(this, _SessionApi_parameters, "f")).filter(p => p.type === type);
    }
    goBack() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").goBack();
    }
    goForward() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").goForward();
    }
    resetParameterValues(force = false) {
        const scope = 'resetParameterValues';
        for (let p in this.parameters)
            this.parameters[p].value = this.parameters[p].defval;
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, force, 'boolean', false);
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").customize(force);
    }
    resetSettings(sections) {
        const scope = 'applySettings';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, sections, 'object', false);
        return __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").resetSettings(this.id, sections);
    }
    saveDefaultParameterValues() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").saveDefaultParameterValues();
    }
    saveSettings(viewportId) {
        const scope = 'saveDefaultParameterValues';
        __classPrivateFieldGet(this, _SessionApi_inputValidator, "f").validateAndError(`SessionApi.${scope}`, viewportId, 'string', false);
        return __classPrivateFieldGet(this, _SessionApi_creationControlCenter, "f").saveSettings(this.id, viewportId);
    }
    saveUiProperties() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").saveUiProperties();
    }
    updateOutputs() {
        return __classPrivateFieldGet(this, _SessionApi_sessionEngine, "f").updateOutputs();
    }
}
exports.SessionApi = SessionApi;
_SessionApi_creationControlCenter = new WeakMap(), _SessionApi_sessionEngine = new WeakMap(), _SessionApi_logger = new WeakMap(), _SessionApi_inputValidator = new WeakMap(), _SessionApi_gltfConverter = new WeakMap(), _SessionApi_outputs = new WeakMap(), _SessionApi_parameters = new WeakMap(), _SessionApi_exports = new WeakMap();
//# sourceMappingURL=SessionApi.js.map