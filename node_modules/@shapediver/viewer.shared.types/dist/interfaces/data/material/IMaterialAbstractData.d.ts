import { ITreeNodeData } from "@shapediver/viewer.shared.node-tree";
import { Color } from "../../../types";
import { IMapData } from "./IMapData";
export declare enum MATERIAL_SIDE {
    DOUBLE = "double",
    FRONT = "front",
    BACK = "back"
}
export declare enum MATERIAL_ALPHA {
    OPAQUE = "opaque",
    MASK = "mask",
    BLEND = "blend"
}
export declare enum MATERIAL_SHADING {
    FLAT = "flat",
    SMOOTH = "smooth"
}
export interface IMaterialAbstractDataProperties {
    alphaCutoff?: number;
    alphaMap?: IMapData;
    alphaMode?: MATERIAL_ALPHA;
    aoMap?: IMapData;
    aoMapIntensity?: number;
    bumpMap?: IMapData;
    bumpScale?: number;
    color?: Color;
    emissiveMap?: IMapData;
    emissiveness?: Color;
    map?: IMapData;
    name?: string;
    normalMap?: IMapData;
    normalScale?: number;
    opacity?: number;
    shading?: MATERIAL_SHADING;
    side?: MATERIAL_SIDE;
}
export interface IMaterialAbstractData extends ITreeNodeData {
    alphaCutoff: number;
    alphaMap?: IMapData;
    alphaMode: MATERIAL_ALPHA;
    aoMap?: IMapData;
    aoMapIntensity: number;
    bumpMap?: IMapData;
    bumpScale: number;
    color: Color;
    emissiveMap?: IMapData;
    emissiveness: Color;
    map?: IMapData;
    materialOutput: boolean;
    name?: string;
    normalMap?: IMapData;
    normalScale: number;
    opacity: number;
    shading: MATERIAL_SHADING;
    side: MATERIAL_SIDE;
    threeJsObject: {
        [key: string]: THREE.Material;
    };
    clone(): IMaterialAbstractData;
    copy(source: IMaterialAbstractData): void;
    reset(): void;
}
//# sourceMappingURL=IMaterialAbstractData.d.ts.map