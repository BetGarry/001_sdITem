import { vec2 } from "gl-matrix";
import { AbstractTreeNodeData } from "@shapediver/viewer.shared.node-tree";
import { IMapData, TEXTURE_FILTERING, TEXTURE_WRAPPING } from "../../interfaces/data/material/IMapData";
import { Color } from "../../types";
export declare class MapData extends AbstractTreeNodeData implements IMapData {
    #private;
    constructor(image: HTMLImageElement, wrapS?: TEXTURE_WRAPPING, wrapT?: TEXTURE_WRAPPING, minFilter?: TEXTURE_FILTERING, magFilter?: TEXTURE_FILTERING, center?: vec2, color?: Color, offset?: vec2, repeat?: vec2, rotation?: number, flipY?: boolean, id?: string, version?: string);
    get center(): vec2;
    set center(value: vec2);
    get color(): Color | undefined;
    set color(value: Color | undefined);
    get flipY(): boolean;
    set flipY(value: boolean);
    get image(): HTMLImageElement;
    set image(value: HTMLImageElement);
    get magFilter(): TEXTURE_FILTERING;
    set magFilter(value: TEXTURE_FILTERING);
    get minFilter(): TEXTURE_FILTERING;
    set minFilter(value: TEXTURE_FILTERING);
    get offset(): vec2;
    set offset(value: vec2);
    get repeat(): vec2;
    set repeat(value: vec2);
    get rotation(): number;
    set rotation(value: number);
    get wrapS(): TEXTURE_WRAPPING;
    set wrapS(value: TEXTURE_WRAPPING);
    get wrapT(): TEXTURE_WRAPPING;
    set wrapT(value: TEXTURE_WRAPPING);
    clone(): IMapData;
}
//# sourceMappingURL=MapData.d.ts.map