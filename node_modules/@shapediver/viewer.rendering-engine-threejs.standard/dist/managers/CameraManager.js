"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _CameraManager_camera, _CameraManager_cameraCache;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraManager = void 0;
const THREE = __importStar(require("three"));
const gl_matrix_1 = require("gl-matrix");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
class CameraManager {
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        _CameraManager_camera.set(this, new THREE.PerspectiveCamera());
        _CameraManager_cameraCache.set(this, {});
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    get camera() {
        return __classPrivateFieldGet(this, _CameraManager_camera, "f");
    }
    updateCamera(time, aspect) {
        var _a;
        if (((_a = this._renderingEngine.cameraEngine.camera) === null || _a === void 0 ? void 0 : _a.type) === 'perspective')
            this._renderingEngine.cameraEngine.camera.aspect = aspect;
        return this._renderingEngine.cameraEngine.camera.update(time);
    }
    load(camera, dataChild) {
        let threeCamera = __classPrivateFieldGet(this, _CameraManager_cameraCache, "f")[camera.id];
        if (camera instanceof viewer_rendering_engine_camera_engine_1.PerspectiveCamera) {
            if (!threeCamera) {
                threeCamera = new THREE.PerspectiveCamera();
                __classPrivateFieldGet(this, _CameraManager_cameraCache, "f")[camera.id] = threeCamera;
                camera.threeJsObject[this._renderingEngine.id] = threeCamera;
                if (dataChild)
                    dataChild.add(threeCamera);
            }
            else {
                camera.threeJsObject[this._renderingEngine.id] = threeCamera;
                if (dataChild && !dataChild.children.find(t => t === threeCamera))
                    dataChild.add(threeCamera);
            }
            const perspectiveCamera = camera;
            const threePerspectiveCamera = threeCamera;
            threePerspectiveCamera.up.set(0, 0, 1);
            if (perspectiveCamera.useNodeData) {
                threePerspectiveCamera.fov = perspectiveCamera.fov;
                threePerspectiveCamera.aspect = perspectiveCamera.aspect;
                threePerspectiveCamera.far = perspectiveCamera.far;
                threePerspectiveCamera.near = perspectiveCamera.near;
                threePerspectiveCamera.updateProjectionMatrix();
            }
        }
        else {
            if (!threeCamera) {
                threeCamera = new THREE.OrthographicCamera(0, 0, 0, 0);
                __classPrivateFieldGet(this, _CameraManager_cameraCache, "f")[camera.id] = threeCamera;
                camera.threeJsObject[this._renderingEngine.id] = threeCamera;
                if (dataChild)
                    dataChild.add(threeCamera);
            }
            else {
                camera.threeJsObject[this._renderingEngine.id] = threeCamera;
                if (dataChild && !dataChild.children.find(t => t === threeCamera))
                    dataChild.add(threeCamera);
            }
            const orthographicCamera = camera;
            const threeOrthographicCamera = threeCamera;
            threeOrthographicCamera.up.set(orthographicCamera.up[0], orthographicCamera.up[1], orthographicCamera.up[2]);
            if (orthographicCamera.useNodeData) {
                threeOrthographicCamera.left = orthographicCamera.left;
                threeOrthographicCamera.bottom = orthographicCamera.bottom;
                threeOrthographicCamera.right = orthographicCamera.right;
                threeOrthographicCamera.top = orthographicCamera.top;
                threeOrthographicCamera.near = orthographicCamera.near;
                threeOrthographicCamera.far = orthographicCamera.far;
                threeOrthographicCamera.updateProjectionMatrix();
            }
        }
    }
    adjustCamera(aspect) {
        let cameraThree;
        const camera = this._renderingEngine.cameraEngine.camera;
        if (camera.useNodeData) {
            const sdCameraNode = camera.node.threeJsObject[this._renderingEngine.id];
            const sdCameraData = sdCameraNode.children[0];
            cameraThree = sdCameraData.children[0];
        }
        else {
            if (this._renderingEngine.cameraEngine.camera.type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.ORTHOGRAPHIC) {
                const orthographicCameraData = camera;
                let orthographicCameraThreeJs = orthographicCameraData.threeJsObject[this._renderingEngine.id];
                if (!orthographicCameraThreeJs)
                    this.load(orthographicCameraData);
                orthographicCameraThreeJs = orthographicCameraData.threeJsObject[this._renderingEngine.id];
                const distance = gl_matrix_1.vec3.distance(orthographicCameraData.position, orthographicCameraData.target) / 2;
                orthographicCameraThreeJs.up.set(orthographicCameraData.up[0], orthographicCameraData.up[1], orthographicCameraData.up[2]);
                orthographicCameraThreeJs.left = orthographicCameraData.left = -distance * aspect;
                orthographicCameraThreeJs.bottom = orthographicCameraData.bottom = -distance;
                orthographicCameraThreeJs.right = orthographicCameraData.right = distance * aspect;
                orthographicCameraThreeJs.top = orthographicCameraData.top = distance;
                orthographicCameraThreeJs.near = orthographicCameraData.near = 0.01;
                orthographicCameraThreeJs.far = orthographicCameraData.far = 100 * distance;
                orthographicCameraThreeJs.position.set(orthographicCameraData.position[0], orthographicCameraData.position[1], orthographicCameraData.position[2]);
                orthographicCameraThreeJs.lookAt(orthographicCameraData.target[0], orthographicCameraData.target[1], orthographicCameraData.target[2]);
                orthographicCameraThreeJs.updateProjectionMatrix();
                cameraThree = orthographicCameraThreeJs;
            }
            else {
                const perspectiveCameraData = camera;
                let perspectiveCameraThreeJs = perspectiveCameraData.threeJsObject[this._renderingEngine.id];
                if (!perspectiveCameraThreeJs)
                    this.load(perspectiveCameraData);
                perspectiveCameraThreeJs = perspectiveCameraData.threeJsObject[this._renderingEngine.id];
                perspectiveCameraThreeJs.up.set(0, 0, 1);
                const fov = this._renderingEngine.cameraEngine.camera.fov;
                const bs = this._renderingEngine.sceneTreeManager.boundingBox.boundingSphere;
                const radius = bs.radius > 0 ? bs.radius : 2;
                perspectiveCameraThreeJs.fov = perspectiveCameraData.fov = fov;
                perspectiveCameraThreeJs.aspect = perspectiveCameraData.aspect = aspect;
                perspectiveCameraThreeJs.far = perspectiveCameraData.far = (fov < 10 ? fov * 100.0 * 100 * radius : 100 * radius);
                perspectiveCameraThreeJs.near = perspectiveCameraData.near = (fov < 10 ? fov * 100.0 * 0.01 * radius : 0.01 * radius);
                perspectiveCameraThreeJs.position.set(perspectiveCameraData.position[0], perspectiveCameraData.position[1], perspectiveCameraData.position[2]);
                perspectiveCameraThreeJs.lookAt(perspectiveCameraData.target[0], perspectiveCameraData.target[1], perspectiveCameraData.target[2]);
                perspectiveCameraThreeJs.updateProjectionMatrix();
                cameraThree = perspectiveCameraThreeJs;
            }
        }
        __classPrivateFieldSet(this, _CameraManager_camera, cameraThree, "f");
        return cameraThree;
    }
    init() { }
}
exports.CameraManager = CameraManager;
_CameraManager_camera = new WeakMap(), _CameraManager_cameraCache = new WeakMap();
//# sourceMappingURL=CameraManager.js.map